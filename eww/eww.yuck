(include "funcs.yuck")
(include "modules/variables.yuck")
(include "modules/revealer.yuck")
(include "modules/qtile.yuck")
; (include "modules/powermenu.yuck")

; (defvar revealSpotify false)
; (defvar revealVolume false)
; (defvar revealNotify false)


; (defpoll volume :initial 100 :interval 2 "amixer sget Master |tail -n1 |awk '{print $4}' |tr -d '[%]'")
; (deflisten musicStatus "playerctl --follow status || true")
; (deflisten music :initial ""
  ; "playerctl --follow metadata --format '{{ artist }} - {{ title }}' || true")
; (deflisten notifications
;   :initial ""
;   :onchange "eww update revealNotify=true && sleep 5 && eww update revealNotify=false"
;   "notification-listener")

; ================== WINDOW ===========
(defwindow bar
  :monitor "<primary>"
  :windowtype "dock"
  :geometry (geometry :x "0%"
                      :y "0%"
                      :width "100%"
                      :height "10px"
                      :anchor "top center")
  :reserve (struts :side "top" :distance "40px")
  (bar))

; -------------- BAR DEFINITION
(defwidget bar []
  (centerbox :class "centerbox" :orientation "h"
    (left_widgets)
    (center_widgets)
    (right_widgets)))

(defwidget left_widgets []
  (box :class "left_widgets" :orientation "h" :space-evenly false :halign "start"
    (workspaces)
    (layout)
    (windows)
  )
)

(defwidget center_widgets []
    (spotify)
)


(defwidget right_widgets []
  (box :class "right_widgets" :orientation "h" :space-evenly false :halign "end"
    (weather)
    (volume_widget)
    (systray :class "systray" :prepend-new true)

    (metrics)
    (datebox)
    (powermenu)))
    
;--------- METRICS -------
(defwidget metrics[]
  (box :class "metrics"
    :space-evently false
    (metric :label "Ôãõ"
            :value {EWW_RAM.used_mem_perc}
            :onchange "")
    (metric :label "ÔÉ§"
            :value {EWW_CPU.avg}
            :onchange "")
    (metric :label "Û∞Åπ"
            :value {EWW_BATTERY["BAT0"].capacity}
            :onchange "")
    (metric :label "ÔÉá"
            :value {round((1 - (EWW_DISK["/"].free / EWW_DISK["/"].total)) * 100, 0)}
            :onchange "")
  )
)

; ----------- NOTIFICATIONS (unused?)
; (defwidget notifications [?class]
;   (box :space-evenly false
;     :class "hover-module ${class}"
;     (revealer-on-hover :class "hl-on-hover"
;       :var revealNotify
;       :varname "revealNotify"
;       :transition "slideleft"
;       :class "notifications"

;       (hovered-sign :var revealNotify
;         (label :class "notifications" :text "")
;         (label :class "notifications" :text ""))
      
;       (button :onclick "playerctl play-pause" (label :class "notifications" :text " ${notifications} "))
;      "  ÔÅµ  ")))
 

; ------- POWER MENU STUFF ------
(defwidget powermenu []
  (button :class "powermenu_toggle"
          :onclick "~/.config/rofi/powermenu/type-5/powermenu.sh"
          (label :text "‚èª"))
)




; ------- METRICS STUFF ------
(defwidget metric [label value onchange]
  (box :orientation "h"
       :class "metric"
       :space-evenly false
    (box :class "label" label)
    (scale :min 0
           :max 101
           :orientation "v"
          :flipped true
           :active {onchange != ""}
           :value value
           :onchange onchange)))

; ------- DATE STUFF ------
(defpoll date :interval "10s"
  "date '+%d.%b %Y'")
(defpoll time_local :interval "10s"
  "date '+%H:%M %Z'")
(defpoll time_utc :interval "10s"
  "date -u '+%H:%M %Z'")

(defwidget datebox []
    (box :class "datebox"

    (label :class "datebox date" :text date )
    (box 
      :orientation "v"
      (label :class "datebox time local" :text time_local)
      (label :class "datebox time utc" :text time_utc))
    )
)


; ------- WEATHER STUFF ------
(defpoll weather :initial "(label :text \"loading...\")" :interval 600 "scripts/weather.py") 

(defwidget weather []
  (literal :content weather))
; ------- MUSIC STUFF ------

; (defwidget music []
;   (box :class "music"
;        :orientation "h"
;        :space-evenly false
;        :halign "center"
;     {music != "" ? "üéµ${music}" : ""}))
;(defvar volume_active "Û∞ïæ")
;(defvar volume_mute "Û∞ñÅ")

(defpoll volume :initial 100 :interval 2 "amixer sget Master |tail -n1 |awk '{print $4}' |tr -d '[%]'")
(defpoll mute :initial "on" :interval 2 "amixer sget Master |tail -n1 |awk '{print $6}' |tr -d '[%]'")
(deflisten musicStatus "playerctl --follow status || true")
(deflisten music :initial ""
  "playerctl --follow metadata --format '{{ artist }} - {{ title }}' || true")


(defwidget volume_widget [ ]
    (eventbox :onscroll "scripts/setvol {}"
        :onclick "amixer -q -D pulse sset Master toggle"

    (metric :label {mute == "on" ? "Û∞ïæ" : "Û∞ñÅ"}
      ; :label "üîä"
            :value volume
            :onchange "amixer -D pulse sset Master {}%")
    )
)

(defwidget spotify [?class]
  (box :space-evenly false
    ;;:class "hover-module ${class}"
    :class "spotify"
    (revealer-on-hover :class "hl-on-hover"
      :var revealSpotify
      :varname "revealSpotify"
      :transition "slideleft"
     ;; :class "spotify"
      
      (hovered-sign :var revealSpotify
        (label :text "")
        (label :text ""))
      
      (button 
        :onclick "playerctl play-pause"
        ; :onrightclick "spotify" 
        (label 
          ; :class "spotify" 
          ; :text " ${music} "))
    ;  "  ÔÜº - ${ musicStatus == "Playing" ? "ÔÖÑ" : "Ôäã" }  ")))
          :text " ${music} "))
      (button  :onrightclick "spotify" 
          :class "unopened"
          "  ÔÜº - ${ musicStatus == "Playing" ? "ÔÖÑ" : "Ôäã" }  ")
    )
  )
)
  
